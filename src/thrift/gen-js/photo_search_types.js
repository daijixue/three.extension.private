//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ThriftErrorType = {
  'OK' : 1,
  'YES' : 2,
  'EXISTED' : 3,
  'FAILED' : 4
};
InvalidOperation = function(args) {
  this.errorType = null;
  this.errorDes = null;
  if (args) {
    if (args.errorType !== undefined && args.errorType !== null) {
      this.errorType = args.errorType;
    }
    if (args.errorDes !== undefined && args.errorDes !== null) {
      this.errorDes = args.errorDes;
    }
  }
};
Thrift.inherits(InvalidOperation, Thrift.TException);
InvalidOperation.prototype.name = 'InvalidOperation';
InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorDes = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.errorType !== null && this.errorType !== undefined) {
    output.writeFieldBegin('errorType', Thrift.Type.I32, 1);
    output.writeI32(this.errorType);
    output.writeFieldEnd();
  }
  if (this.errorDes !== null && this.errorDes !== undefined) {
    output.writeFieldBegin('errorDes', Thrift.Type.STRING, 2);
    output.writeString(this.errorDes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftMatrix4 = function(args) {
  this.n11 = null;
  this.n12 = null;
  this.n13 = null;
  this.n14 = null;
  this.n21 = null;
  this.n22 = null;
  this.n23 = null;
  this.n24 = null;
  this.n31 = null;
  this.n32 = null;
  this.n33 = null;
  this.n34 = null;
  this.n41 = null;
  this.n42 = null;
  this.n43 = null;
  this.n44 = null;
  if (args) {
    if (args.n11 !== undefined && args.n11 !== null) {
      this.n11 = args.n11;
    }
    if (args.n12 !== undefined && args.n12 !== null) {
      this.n12 = args.n12;
    }
    if (args.n13 !== undefined && args.n13 !== null) {
      this.n13 = args.n13;
    }
    if (args.n14 !== undefined && args.n14 !== null) {
      this.n14 = args.n14;
    }
    if (args.n21 !== undefined && args.n21 !== null) {
      this.n21 = args.n21;
    }
    if (args.n22 !== undefined && args.n22 !== null) {
      this.n22 = args.n22;
    }
    if (args.n23 !== undefined && args.n23 !== null) {
      this.n23 = args.n23;
    }
    if (args.n24 !== undefined && args.n24 !== null) {
      this.n24 = args.n24;
    }
    if (args.n31 !== undefined && args.n31 !== null) {
      this.n31 = args.n31;
    }
    if (args.n32 !== undefined && args.n32 !== null) {
      this.n32 = args.n32;
    }
    if (args.n33 !== undefined && args.n33 !== null) {
      this.n33 = args.n33;
    }
    if (args.n34 !== undefined && args.n34 !== null) {
      this.n34 = args.n34;
    }
    if (args.n41 !== undefined && args.n41 !== null) {
      this.n41 = args.n41;
    }
    if (args.n42 !== undefined && args.n42 !== null) {
      this.n42 = args.n42;
    }
    if (args.n43 !== undefined && args.n43 !== null) {
      this.n43 = args.n43;
    }
    if (args.n44 !== undefined && args.n44 !== null) {
      this.n44 = args.n44;
    }
  }
};
ThriftMatrix4.prototype = {};
ThriftMatrix4.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n11 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n12 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n13 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n14 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n21 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n22 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n23 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n24 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n31 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n32 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n33 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n34 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n41 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n42 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n43 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.DOUBLE) {
        this.n44 = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftMatrix4.prototype.write = function(output) {
  output.writeStructBegin('ThriftMatrix4');
  if (this.n11 !== null && this.n11 !== undefined) {
    output.writeFieldBegin('n11', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.n11);
    output.writeFieldEnd();
  }
  if (this.n12 !== null && this.n12 !== undefined) {
    output.writeFieldBegin('n12', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.n12);
    output.writeFieldEnd();
  }
  if (this.n13 !== null && this.n13 !== undefined) {
    output.writeFieldBegin('n13', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.n13);
    output.writeFieldEnd();
  }
  if (this.n14 !== null && this.n14 !== undefined) {
    output.writeFieldBegin('n14', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.n14);
    output.writeFieldEnd();
  }
  if (this.n21 !== null && this.n21 !== undefined) {
    output.writeFieldBegin('n21', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.n21);
    output.writeFieldEnd();
  }
  if (this.n22 !== null && this.n22 !== undefined) {
    output.writeFieldBegin('n22', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.n22);
    output.writeFieldEnd();
  }
  if (this.n23 !== null && this.n23 !== undefined) {
    output.writeFieldBegin('n23', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.n23);
    output.writeFieldEnd();
  }
  if (this.n24 !== null && this.n24 !== undefined) {
    output.writeFieldBegin('n24', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.n24);
    output.writeFieldEnd();
  }
  if (this.n31 !== null && this.n31 !== undefined) {
    output.writeFieldBegin('n31', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.n31);
    output.writeFieldEnd();
  }
  if (this.n32 !== null && this.n32 !== undefined) {
    output.writeFieldBegin('n32', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.n32);
    output.writeFieldEnd();
  }
  if (this.n33 !== null && this.n33 !== undefined) {
    output.writeFieldBegin('n33', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.n33);
    output.writeFieldEnd();
  }
  if (this.n34 !== null && this.n34 !== undefined) {
    output.writeFieldBegin('n34', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.n34);
    output.writeFieldEnd();
  }
  if (this.n41 !== null && this.n41 !== undefined) {
    output.writeFieldBegin('n41', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.n41);
    output.writeFieldEnd();
  }
  if (this.n42 !== null && this.n42 !== undefined) {
    output.writeFieldBegin('n42', Thrift.Type.DOUBLE, 14);
    output.writeDouble(this.n42);
    output.writeFieldEnd();
  }
  if (this.n43 !== null && this.n43 !== undefined) {
    output.writeFieldBegin('n43', Thrift.Type.DOUBLE, 15);
    output.writeDouble(this.n43);
    output.writeFieldEnd();
  }
  if (this.n44 !== null && this.n44 !== undefined) {
    output.writeFieldBegin('n44', Thrift.Type.DOUBLE, 16);
    output.writeDouble(this.n44);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftVector3 = function(args) {
  this.x = null;
  this.y = null;
  this.z = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
    if (args.z !== undefined && args.z !== null) {
      this.z = args.z;
    }
  }
};
ThriftVector3.prototype = {};
ThriftVector3.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.z = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftVector3.prototype.write = function(output) {
  output.writeStructBegin('ThriftVector3');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  if (this.z !== null && this.z !== undefined) {
    output.writeFieldBegin('z', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.z);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftVector2 = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
  }
};
ThriftVector2.prototype = {};
ThriftVector2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftVector2.prototype.write = function(output) {
  output.writeStructBegin('ThriftVector2');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftDatumPlane = function(args) {
  this.datumPoints = null;
  if (args) {
    if (args.datumPoints !== undefined && args.datumPoints !== null) {
      this.datumPoints = Thrift.copyList(args.datumPoints, [ThriftVector3]);
    }
  }
};
ThriftDatumPlane.prototype = {};
ThriftDatumPlane.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.datumPoints = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ThriftVector3();
          elem6.read(input);
          this.datumPoints.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftDatumPlane.prototype.write = function(output) {
  output.writeStructBegin('ThriftDatumPlane');
  if (this.datumPoints !== null && this.datumPoints !== undefined) {
    output.writeFieldBegin('datumPoints', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.datumPoints.length);
    for (var iter7 in this.datumPoints)
    {
      if (this.datumPoints.hasOwnProperty(iter7))
      {
        iter7 = this.datumPoints[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftDatumPlanes = function(args) {
  this.datumPlanes = null;
  this.intersectPoint = null;
  this.constraintPoint = null;
  if (args) {
    if (args.datumPlanes !== undefined && args.datumPlanes !== null) {
      this.datumPlanes = Thrift.copyList(args.datumPlanes, [ThriftDatumPlane]);
    }
    if (args.intersectPoint !== undefined && args.intersectPoint !== null) {
      this.intersectPoint = new ThriftVector3(args.intersectPoint);
    }
    if (args.constraintPoint !== undefined && args.constraintPoint !== null) {
      this.constraintPoint = new ThriftVector3(args.constraintPoint);
    }
  }
};
ThriftDatumPlanes.prototype = {};
ThriftDatumPlanes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.datumPlanes = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ThriftDatumPlane();
          elem14.read(input);
          this.datumPlanes.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.intersectPoint = new ThriftVector3();
        this.intersectPoint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.constraintPoint = new ThriftVector3();
        this.constraintPoint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftDatumPlanes.prototype.write = function(output) {
  output.writeStructBegin('ThriftDatumPlanes');
  if (this.datumPlanes !== null && this.datumPlanes !== undefined) {
    output.writeFieldBegin('datumPlanes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.datumPlanes.length);
    for (var iter15 in this.datumPlanes)
    {
      if (this.datumPlanes.hasOwnProperty(iter15))
      {
        iter15 = this.datumPlanes[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.intersectPoint !== null && this.intersectPoint !== undefined) {
    output.writeFieldBegin('intersectPoint', Thrift.Type.STRUCT, 2);
    this.intersectPoint.write(output);
    output.writeFieldEnd();
  }
  if (this.constraintPoint !== null && this.constraintPoint !== undefined) {
    output.writeFieldBegin('constraintPoint', Thrift.Type.STRUCT, 3);
    this.constraintPoint.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftCamera = function(args) {
  this.matrixWorldInverse = null;
  this.projectionMatrix = null;
  if (args) {
    if (args.matrixWorldInverse !== undefined && args.matrixWorldInverse !== null) {
      this.matrixWorldInverse = new ThriftMatrix4(args.matrixWorldInverse);
    }
    if (args.projectionMatrix !== undefined && args.projectionMatrix !== null) {
      this.projectionMatrix = new ThriftMatrix4(args.projectionMatrix);
    }
  }
};
ThriftCamera.prototype = {};
ThriftCamera.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.matrixWorldInverse = new ThriftMatrix4();
        this.matrixWorldInverse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectionMatrix = new ThriftMatrix4();
        this.projectionMatrix.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftCamera.prototype.write = function(output) {
  output.writeStructBegin('ThriftCamera');
  if (this.matrixWorldInverse !== null && this.matrixWorldInverse !== undefined) {
    output.writeFieldBegin('matrixWorldInverse', Thrift.Type.STRUCT, 1);
    this.matrixWorldInverse.write(output);
    output.writeFieldEnd();
  }
  if (this.projectionMatrix !== null && this.projectionMatrix !== undefined) {
    output.writeFieldBegin('projectionMatrix', Thrift.Type.STRUCT, 2);
    this.projectionMatrix.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftPhotoData = function(args) {
  this.index = null;
  this.imgPower = null;
  this.angle = null;
  this.deltaToCenter = null;
  this.viewMatrix = null;
  this.projectionMatrix = null;
  this.imgUrl = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.imgPower !== undefined && args.imgPower !== null) {
      this.imgPower = args.imgPower;
    }
    if (args.angle !== undefined && args.angle !== null) {
      this.angle = args.angle;
    }
    if (args.deltaToCenter !== undefined && args.deltaToCenter !== null) {
      this.deltaToCenter = args.deltaToCenter;
    }
    if (args.viewMatrix !== undefined && args.viewMatrix !== null) {
      this.viewMatrix = new ThriftMatrix4(args.viewMatrix);
    }
    if (args.projectionMatrix !== undefined && args.projectionMatrix !== null) {
      this.projectionMatrix = new ThriftMatrix4(args.projectionMatrix);
    }
    if (args.imgUrl !== undefined && args.imgUrl !== null) {
      this.imgUrl = args.imgUrl;
    }
  }
};
ThriftPhotoData.prototype = {};
ThriftPhotoData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.imgPower = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.angle = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.deltaToCenter = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.viewMatrix = new ThriftMatrix4();
        this.viewMatrix.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectionMatrix = new ThriftMatrix4();
        this.projectionMatrix.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.imgUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftPhotoData.prototype.write = function(output) {
  output.writeStructBegin('ThriftPhotoData');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 1);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.imgPower !== null && this.imgPower !== undefined) {
    output.writeFieldBegin('imgPower', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.imgPower);
    output.writeFieldEnd();
  }
  if (this.angle !== null && this.angle !== undefined) {
    output.writeFieldBegin('angle', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.angle);
    output.writeFieldEnd();
  }
  if (this.deltaToCenter !== null && this.deltaToCenter !== undefined) {
    output.writeFieldBegin('deltaToCenter', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.deltaToCenter);
    output.writeFieldEnd();
  }
  if (this.viewMatrix !== null && this.viewMatrix !== undefined) {
    output.writeFieldBegin('viewMatrix', Thrift.Type.STRUCT, 5);
    this.viewMatrix.write(output);
    output.writeFieldEnd();
  }
  if (this.projectionMatrix !== null && this.projectionMatrix !== undefined) {
    output.writeFieldBegin('projectionMatrix', Thrift.Type.STRUCT, 6);
    this.projectionMatrix.write(output);
    output.writeFieldEnd();
  }
  if (this.imgUrl !== null && this.imgUrl !== undefined) {
    output.writeFieldBegin('imgUrl', Thrift.Type.STRING, 7);
    output.writeString(this.imgUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

