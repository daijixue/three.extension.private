//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

PhotoMatcher_ping_args = function(args) {
};
PhotoMatcher_ping_args.prototype = {};
PhotoMatcher_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_ping_args.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_ping_result = function(args) {
};
PhotoMatcher_ping_result.prototype = {};
PhotoMatcher_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_ping_result.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_test_args = function(args) {
  this.num = null;
  this.testMsg = null;
  if (args) {
    if (args.num !== undefined && args.num !== null) {
      this.num = args.num;
    }
    if (args.testMsg !== undefined && args.testMsg !== null) {
      this.testMsg = args.testMsg;
    }
  }
};
PhotoMatcher_test_args.prototype = {};
PhotoMatcher_test_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.testMsg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_test_args.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_test_args');
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.I32, 1);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  if (this.testMsg !== null && this.testMsg !== undefined) {
    output.writeFieldBegin('testMsg', Thrift.Type.STRING, 2);
    output.writeString(this.testMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_test_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
PhotoMatcher_test_result.prototype = {};
PhotoMatcher_test_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_test_result.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_test_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_getNumArNode_args = function(args) {
  this.resourceID = null;
  if (args) {
    if (args.resourceID !== undefined && args.resourceID !== null) {
      this.resourceID = args.resourceID;
    }
  }
};
PhotoMatcher_getNumArNode_args.prototype = {};
PhotoMatcher_getNumArNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resourceID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_getNumArNode_args.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_getNumArNode_args');
  if (this.resourceID !== null && this.resourceID !== undefined) {
    output.writeFieldBegin('resourceID', Thrift.Type.STRING, 1);
    output.writeString(this.resourceID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_getNumArNode_result = function(args) {
  this.success = null;
  this.excp = null;
  if (args instanceof InvalidOperation) {
    this.excp = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.excp !== undefined && args.excp !== null) {
      this.excp = args.excp;
    }
  }
};
PhotoMatcher_getNumArNode_result.prototype = {};
PhotoMatcher_getNumArNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excp = new InvalidOperation();
        this.excp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_getNumArNode_result.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_getNumArNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.excp !== null && this.excp !== undefined) {
    output.writeFieldBegin('excp', Thrift.Type.STRUCT, 1);
    this.excp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_loadArNode_args = function(args) {
  this.resourceID = null;
  this.numArNode = null;
  if (args) {
    if (args.resourceID !== undefined && args.resourceID !== null) {
      this.resourceID = args.resourceID;
    }
    if (args.numArNode !== undefined && args.numArNode !== null) {
      this.numArNode = args.numArNode;
    }
  }
};
PhotoMatcher_loadArNode_args.prototype = {};
PhotoMatcher_loadArNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resourceID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numArNode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_loadArNode_args.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_loadArNode_args');
  if (this.resourceID !== null && this.resourceID !== undefined) {
    output.writeFieldBegin('resourceID', Thrift.Type.STRING, 1);
    output.writeString(this.resourceID);
    output.writeFieldEnd();
  }
  if (this.numArNode !== null && this.numArNode !== undefined) {
    output.writeFieldBegin('numArNode', Thrift.Type.I32, 2);
    output.writeI32(this.numArNode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_loadArNode_result = function(args) {
  this.success = null;
  this.excp = null;
  if (args instanceof InvalidOperation) {
    this.excp = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.excp !== undefined && args.excp !== null) {
      this.excp = args.excp;
    }
  }
};
PhotoMatcher_loadArNode_result.prototype = {};
PhotoMatcher_loadArNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excp = new InvalidOperation();
        this.excp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_loadArNode_result.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_loadArNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.excp !== null && this.excp !== undefined) {
    output.writeFieldBegin('excp', Thrift.Type.STRUCT, 1);
    this.excp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_searchPhotoByNearest_args = function(args) {
  this.resourceID = null;
  this.thriftCamera = null;
  this.datumPlanes = null;
  if (args) {
    if (args.resourceID !== undefined && args.resourceID !== null) {
      this.resourceID = args.resourceID;
    }
    if (args.thriftCamera !== undefined && args.thriftCamera !== null) {
      this.thriftCamera = new ThriftCamera(args.thriftCamera);
    }
    if (args.datumPlanes !== undefined && args.datumPlanes !== null) {
      this.datumPlanes = new ThriftDatumPlanes(args.datumPlanes);
    }
  }
};
PhotoMatcher_searchPhotoByNearest_args.prototype = {};
PhotoMatcher_searchPhotoByNearest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resourceID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.thriftCamera = new ThriftCamera();
        this.thriftCamera.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.datumPlanes = new ThriftDatumPlanes();
        this.datumPlanes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_searchPhotoByNearest_args.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_searchPhotoByNearest_args');
  if (this.resourceID !== null && this.resourceID !== undefined) {
    output.writeFieldBegin('resourceID', Thrift.Type.STRING, 1);
    output.writeString(this.resourceID);
    output.writeFieldEnd();
  }
  if (this.thriftCamera !== null && this.thriftCamera !== undefined) {
    output.writeFieldBegin('thriftCamera', Thrift.Type.STRUCT, 2);
    this.thriftCamera.write(output);
    output.writeFieldEnd();
  }
  if (this.datumPlanes !== null && this.datumPlanes !== undefined) {
    output.writeFieldBegin('datumPlanes', Thrift.Type.STRUCT, 3);
    this.datumPlanes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcher_searchPhotoByNearest_result = function(args) {
  this.success = null;
  this.excp = null;
  if (args instanceof InvalidOperation) {
    this.excp = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ThriftPhotoData(args.success);
    }
    if (args.excp !== undefined && args.excp !== null) {
      this.excp = args.excp;
    }
  }
};
PhotoMatcher_searchPhotoByNearest_result.prototype = {};
PhotoMatcher_searchPhotoByNearest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ThriftPhotoData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.excp = new InvalidOperation();
        this.excp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhotoMatcher_searchPhotoByNearest_result.prototype.write = function(output) {
  output.writeStructBegin('PhotoMatcher_searchPhotoByNearest_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.excp !== null && this.excp !== undefined) {
    output.writeFieldBegin('excp', Thrift.Type.STRUCT, 1);
    this.excp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhotoMatcherClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
PhotoMatcherClient.prototype = {};
PhotoMatcherClient.prototype.ping = function(callback) {
  this.send_ping(callback); 
  if (!callback) {
  this.recv_ping();
  }
};

PhotoMatcherClient.prototype.send_ping = function(callback) {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new PhotoMatcher_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ping();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PhotoMatcherClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PhotoMatcher_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
PhotoMatcherClient.prototype.test = function(num, testMsg, callback) {
  this.send_test(num, testMsg, callback); 
  if (!callback) {
    return this.recv_test();
  }
};

PhotoMatcherClient.prototype.send_test = function(num, testMsg, callback) {
  this.output.writeMessageBegin('test', Thrift.MessageType.CALL, this.seqid);
  var params = {
    num: num,
    testMsg: testMsg
  };
  var args = new PhotoMatcher_test_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_test();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PhotoMatcherClient.prototype.recv_test = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PhotoMatcher_test_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'test failed: unknown result';
};
PhotoMatcherClient.prototype.getNumArNode = function(resourceID, callback) {
  this.send_getNumArNode(resourceID, callback); 
  if (!callback) {
    return this.recv_getNumArNode();
  }
};

PhotoMatcherClient.prototype.send_getNumArNode = function(resourceID, callback) {
  this.output.writeMessageBegin('getNumArNode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    resourceID: resourceID
  };
  var args = new PhotoMatcher_getNumArNode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getNumArNode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PhotoMatcherClient.prototype.recv_getNumArNode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PhotoMatcher_getNumArNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.excp) {
    throw result.excp;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNumArNode failed: unknown result';
};
PhotoMatcherClient.prototype.loadArNode = function(resourceID, numArNode, callback) {
  this.send_loadArNode(resourceID, numArNode, callback); 
  if (!callback) {
    return this.recv_loadArNode();
  }
};

PhotoMatcherClient.prototype.send_loadArNode = function(resourceID, numArNode, callback) {
  this.output.writeMessageBegin('loadArNode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    resourceID: resourceID,
    numArNode: numArNode
  };
  var args = new PhotoMatcher_loadArNode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_loadArNode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PhotoMatcherClient.prototype.recv_loadArNode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PhotoMatcher_loadArNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.excp) {
    throw result.excp;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadArNode failed: unknown result';
};
PhotoMatcherClient.prototype.searchPhotoByNearest = function(resourceID, thriftCamera, datumPlanes, callback) {
  this.send_searchPhotoByNearest(resourceID, thriftCamera, datumPlanes, callback); 
  if (!callback) {
    return this.recv_searchPhotoByNearest();
  }
};

PhotoMatcherClient.prototype.send_searchPhotoByNearest = function(resourceID, thriftCamera, datumPlanes, callback) {
  this.output.writeMessageBegin('searchPhotoByNearest', Thrift.MessageType.CALL, this.seqid);
  var params = {
    resourceID: resourceID,
    thriftCamera: thriftCamera,
    datumPlanes: datumPlanes
  };
  var args = new PhotoMatcher_searchPhotoByNearest_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_searchPhotoByNearest();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PhotoMatcherClient.prototype.recv_searchPhotoByNearest = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PhotoMatcher_searchPhotoByNearest_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.excp) {
    throw result.excp;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'searchPhotoByNearest failed: unknown result';
};
